/* templates/_map_generator.js.jinja
   --------------------------------------------------------------
   Leaflet map for Mix-n-Match places
   -------------------------------------------------------------- */

/* 1. map setup ------------------------------------------------ */
const mymap = L.map('mapid').setView([{{ lat }}, {{ lng }}], 13);

L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution:
    'Â© OpenStreetMap contributors',
  maxZoom: 18,
}).addTo(mymap);

/* 2. simple circle icons (constant size) --------------------- */
const iconTemplate = (fill) =>
  L.divIcon({
    className: 'custom-div-icon',
    html: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24">
             <circle cx="12" cy="12" r="9" stroke="black" stroke-width="2"
                     fill="${fill}" fill-opacity="0.85"/>
           </svg>`,
    iconSize:  [24, 24],
    iconAnchor:[12, 12],
  });

const BLUE_ICON = iconTemplate('blue');   // matched (has Q-id)
const RED_ICON  = iconTemplate('red');    // unmatched

/* 3. render markers ------------------------------------------ */
const data = {{ data|tojson }};
const markers = L.featureGroup().addTo(mymap);

data.forEach((p) => {
  const icon = p.wikidata ? BLUE_ICON : RED_ICON;
  const m = L.marker([p.lat, p.lng], { icon }).addTo(markers);

  /* popup ---------------------------------------------------- */
  let html = `<strong>${p.locName}</strong>`;

  /* resource & Mix-n-Match links */
  console.log(p);
  html += `<br>ID: <a href="${p.external_url}" target="_blank">${p.external_id}</a>`;
  html += `<br><a href="${p.mnm}" target="_blank">Mix-n-Match entry</a>`;

  /* Wikidata or search link */
  if (p.wikidata) {
    html += `<br><a href="${p.wikidata}" target="_blank">Wikidata item</a>`;
  } else {
    const q = encodeURIComponent(p.locName);
    html += `<br><a href="https://www.wikidata.org/wiki/Special:Search?search=${q}"
                   target="_blank">Search Wikidata</a>`;
  }

  /* optional Commons image */
  if (p.image) {
    const file = p.image.split('/').pop();
    html += `<br><a href="https://commons.wikimedia.org/wiki/File:${file}"
                target="_blank">
            <img src="${p.image}"
                    style="max-width:100%;height:auto;display:block;margin-top:4px">
            </a>`;

  }

  m.bindPopup(html);
});

/* 4. fit view ------------------------------------------------ */
if (markers.getLayers().length) {
  mymap.fitBounds(markers.getBounds().pad(0.2));
}

/* 5. legend -------------------------------------------------- */
L.control({ position: 'bottomright' }).onAdd = function () {
  const div = L.DomUtil.create('div', 'info legend');
  div.style.background = 'white';
  div.style.padding    = '8px 10px';
  div.innerHTML =
    '<h4>Status</h4>' +
    '<svg width="18" height="18"><circle cx="9" cy="9" r="7" stroke="black" stroke-width="2" fill="blue"/></svg> = linked<br>' +
    '<svg width="18" height="18"><circle cx="9" cy="9" r="7" stroke="black" stroke-width="2" fill="red"/></svg> = needs item';
  return div;
}.addTo(mymap);
